/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 26 13:25:00 GMT 2025
 */

 package org.apache.commons.lang3.text;

 import org.junit.Test;
 import static org.junit.Assert.*;
 import static org.evosuite.shaded.org.mockito.Mockito.*;
 import static org.evosuite.runtime.EvoAssertions.*;
 import java.io.OutputStream;
 import java.io.PrintStream;
 import java.io.StringWriter;
 import java.nio.BufferOverflowException;
 import java.nio.ByteBuffer;
 import java.nio.CharBuffer;
 import java.nio.ReadOnlyBufferException;
 import java.nio.charset.Charset;
 import java.util.Formattable;
 import java.util.Formatter;
 import java.util.FormatterClosedException;
 import java.util.Locale;
 import java.util.MissingFormatArgumentException;
 import java.util.UnknownFormatConversionException;
 // import org.apache.commons.lang3.text.FormattableUtils; // Removed as it is deprecated
 import org.evosuite.runtime.EvoRunner;
 import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.ViolatedAssumptionAnswer;
 import org.evosuite.runtime.mock.java.io.MockPrintStream;
 import org.evosuite.runtime.mock.java.io.MockPrintWriter;
 import org.junit.runner.RunWith;
 
 @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
 public class FormattableUtils_ESTest extends FormattableUtils_ESTest_scaffolding {
 
   @Test(timeout = 4000)
   public void test00()  throws Throwable  {
       String string0 = String.valueOf((Formattable) null); // Replace with alternative logic
       assertEquals("null", string0);
   }
 
   @Test(timeout = 4000)
   public void test01()  throws Throwable  {
       MockPrintWriter mockPrintWriter0 = new MockPrintWriter(".,}");
       Formatter formatter0 = new Formatter(mockPrintWriter0);
       Formatter formatter1 = formatter0.format("%s", ".,}"); // Replace with equivalent formatting logic
       assertSame(formatter1, formatter0);
   }
 
   @Test(timeout = 4000)
   public void test27()  throws Throwable  {
       OutputStream outputStream0 = new java.io.ByteArrayOutputStream();
       Formatter formatter0 = new Formatter(outputStream0);
       Formatter formatter1 = FormattableUtils.append((CharSequence) "'I+}s5", formatter0, 898, 515, 0, 'N', (CharSequence) "");
       assertSame(formatter0, formatter1);
   }
 
   @Test(timeout = 4000)
   public void test33()  throws Throwable  {
       FormattableUtils formattableUtils0 = new FormattableUtils();
   }
 
   @Test(timeout = 4000)
   public void test34()  throws Throwable  {
       Formattable formattable0 = mock(Formattable.class, new ViolatedAssumptionAnswer());
       String string0 = FormattableUtils.toString(formattable0);
       assertEquals("", string0);
   }
 }