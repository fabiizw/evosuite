/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 26 16:11:51 GMT 2025
 */

package org.apache.commons.lang3.text.translate;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import org.apache.commons.lang3.text.translate.AggregateTranslator;
import org.apache.commons.lang3.text.translate.CharSequenceTranslator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AggregateTranslator_ESTest extends AggregateTranslator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CharSequenceTranslator[] charSequenceTranslatorArray0 = new CharSequenceTranslator[6];
      CharSequenceTranslator charSequenceTranslator0 = mock(CharSequenceTranslator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(charSequenceTranslator0).translate(any(java.lang.CharSequence.class) , anyInt() , any(java.io.Writer.class));
      charSequenceTranslatorArray0[0] = charSequenceTranslator0;
      charSequenceTranslatorArray0[1] = charSequenceTranslator0;
      charSequenceTranslatorArray0[2] = charSequenceTranslator0;
      charSequenceTranslatorArray0[3] = charSequenceTranslator0;
      charSequenceTranslatorArray0[4] = charSequenceTranslator0;
      charSequenceTranslatorArray0[5] = charSequenceTranslator0;
      AggregateTranslator aggregateTranslator0 = new AggregateTranslator(charSequenceTranslatorArray0);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      int int0 = aggregateTranslator0.translate((CharSequence) stringBuffer0, (-1), (Writer) stringWriter0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CharSequenceTranslator[] charSequenceTranslatorArray0 = new CharSequenceTranslator[8];
      CharSequenceTranslator charSequenceTranslator0 = mock(CharSequenceTranslator.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(charSequenceTranslator0).translate(any(java.lang.CharSequence.class) , anyInt() , any(java.io.Writer.class));
      charSequenceTranslatorArray0[0] = charSequenceTranslator0;
      AggregateTranslator aggregateTranslator0 = new AggregateTranslator(charSequenceTranslatorArray0);
      Writer writer0 = new StringWriter();
      int int0 = aggregateTranslator0.translate((CharSequence) "FFFFF216", 66, writer0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CharSequenceTranslator[] charSequenceTranslatorArray0 = new CharSequenceTranslator[2];
      AggregateTranslator aggregateTranslator0 = new AggregateTranslator(charSequenceTranslatorArray0);
      StringWriter stringWriter0 = new StringWriter(2606);
      // Undeclared exception!
      try { 
        aggregateTranslator0.translate((CharSequence) "A2E", 2606, (Writer) stringWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.translate.AggregateTranslator", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CharSequenceTranslator[] charSequenceTranslatorArray0 = new CharSequenceTranslator[8];
      CharSequenceTranslator charSequenceTranslator0 = mock(CharSequenceTranslator.class, new ViolatedAssumptionAnswer());
      doReturn((-48)).when(charSequenceTranslator0).translate(any(java.lang.CharSequence.class) , anyInt() , any(java.io.Writer.class));
      charSequenceTranslatorArray0[0] = charSequenceTranslator0;
      AggregateTranslator aggregateTranslator0 = new AggregateTranslator(charSequenceTranslatorArray0);
      Writer writer0 = new StringWriter();
      int int0 = aggregateTranslator0.translate((CharSequence) "FFFFF216", (-3562), writer0);
      assertEquals((-48), int0);
  }
}
